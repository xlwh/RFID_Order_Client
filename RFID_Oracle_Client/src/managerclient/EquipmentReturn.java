/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EquipmentReturn.java
 *
 * Created on 2012-7-14, 9:29:13
 */
package managerclient;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import socketclient.SocketClient;


/**
 *
 * @author DELL
 */
public class EquipmentReturn extends javax.swing.JPanel {

	SocketClient c;
	Vector<String> v_result;
	String sql;
	
    Vector <String> head ;
    Vector<Vector> data;
    DefaultTableModel dtm;

    public EquipmentReturn() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

    	
    	/*******************************************************************
    	 * 在每次提交时，先清空jTable
    	 * 清空jTable
    	 * *****************************************************************/
//            int sum1 = dtm.getRowCount();
//            for (int j = 0; j < sum1; j++)
//            	dtm.removeRow(0);
//            int sum_ordered = dtm.getRowCount();
//            for (int j = 0; j < sum_ordered; j++)
//            	dtm.removeRow(0);
//    	
        jSplitPane1 = new javax.swing.JSplitPane();
        jp_information = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtf_userId = new javax.swing.JTextField();
        jtf_username = new javax.swing.JTextField();
        jb_show = new javax.swing.JButton();
        jp_equipment = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt = new javax.swing.JTable();
        jp_button = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(120);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel1.setFont(new java.awt.Font("幼圆", 1, 18));
        jLabel1.setText("用户基本信息");

        jLabel2.setText("用户号：");

        jLabel3.setText("用户名：");


        jb_show.setText("显示信息");
        jb_show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_showActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_informationLayout = new javax.swing.GroupLayout(jp_information);
        jp_information.setLayout(jp_informationLayout);
        jp_informationLayout.setHorizontalGroup(
            jp_informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_informationLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtf_userId, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jtf_username, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jb_show)
                .addGap(19, 19, 19))
            .addGroup(jp_informationLayout.createSequentialGroup()
                .addGap(234, 234, 234)
                .addComponent(jLabel1)
                .addContainerGap(251, Short.MAX_VALUE))
        );
        jp_informationLayout.setVerticalGroup(
            jp_informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_informationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(88, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_informationLayout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addGroup(jp_informationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtf_userId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jb_show))
                .addGap(40, 40, 40))
        );

        jSplitPane1.setTopComponent(jp_information);

        jp_equipment.setBorder(javax.swing.BorderFactory.createTitledBorder("自行车信息"));

        jSplitPane2.setDividerLocation(450);

        head = new Vector<String>();                         //设置表格头
        {head.add("自行车序列号");
        head.add("自行车类型");
        head.add("使用地点");
        head.add("借出时间");}
        data = new Vector<Vector>();                         //数据
        dtm = new DefaultTableModel(data,head);              //创建表格的模型
        jt = new javax.swing.JTable(dtm);                    //创建JTable的实例

        jt.setRowHeight(30);
        jScrollPane1.setViewportView(jt);

        jSplitPane2.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout jt_buttonLayout = new javax.swing.GroupLayout(jp_button);
        jp_button.setLayout(jt_buttonLayout);
        jt_buttonLayout.setHorizontalGroup(
            jt_buttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        jt_buttonLayout.setVerticalGroup(
            jt_buttonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jp_button);

        javax.swing.GroupLayout jp_equipmentLayout = new javax.swing.GroupLayout(jp_equipment);
        jp_equipment.setLayout(jp_equipmentLayout);
        jp_equipmentLayout.setHorizontalGroup(
            jp_equipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );
        jp_equipmentLayout.setVerticalGroup(
            jp_equipmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_equipmentLayout.createSequentialGroup()
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jp_equipment);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>
                                          

    
    
      				 //用户计数器，便于模拟读卡器读取用户信息的过程，保证每次读的都不一样
String userid = null;                        //当前处理的用户id号
String username = null;                      //当前处理的用户名   
int count_borrowed = 0;                      //已借设备的数量
private void jb_showActionPerformed(java.awt.event.ActionEvent evt) {                                        

	/*******************************************************************
	 * 在每次提交时，先清空jTable
	 * 清空jTable
	 * *****************************************************************/
        int sum1 = dtm.getRowCount();
        for (int j = 0; j < sum1; j++)
        	dtm.removeRow(0);
        int sum_ordered = dtm.getRowCount();
        for (int j = 0; j < sum_ordered; j++)
        	dtm.removeRow(0);
	
	
	int count_user=1;     
		/*
		 * 在每次提交时，先清空jTable
		 * 清空jTable
		 * */
        int sum = dtm.getRowCount();
        for (int j = 0; j < sum; j++)
        	dtm.removeRow(0);

	
	
        /*
         * 第一步
         * 模拟读卡器读取用户信息的过程
         * 从数据库总读取用户Id和username
         * 每次从用户设备表单中读取一个用户
         **/   
        int row = count_user + 1;
        sql = "select user_Id,user_name from superusers where rownum <" + row  + 
             "minus select user_Id,user_name from superusers where rownum < " + count_user;         //每次从用户设备表单中读取一个用户
   
        try {
        	c = new SocketClient(sql,2);                           //实例化Client对象
        	c.send();                                        //将sql语句发送给服务器端处理
        	v_result = new Vector<String>();
        	v_result = c.getV_result();	                  //得到查询数据库后的结果
			} catch(Exception e){e.printStackTrace(); }                        //查询数据库
      
			count_user++;                                     //用户计数器加1，下一次读取用户表单的下一条信息
			userid = v_result.get(0);                         //得到“读卡器”读取的用户地址
			jtf_userId.setText(userid);                       //将用户ID放入文本框中
			username= v_result.get(1);
			jtf_username.setText(username);
    
    
            /*
            * 第二步:已借设备显示
            * 根据userid 查询用户已借设备信息
            * 将用户已借信息显示在相应的jtable里
            **/ 
            sql = "select eqp_Id,eqp_type,eqp_location,borrowed_time from view_EquipmentBorrowed_show where user_Id= '" + userid +"'";
            try {
       		 c = new SocketClient(sql,4);                           //实例化Client对象
       		 c.send();                                        //将sql语句发送给服务器端处理
       		 v_result = new Vector<String>();
       		 v_result = c.getV_result();	                  //得到查询数据库后的结果
       		} catch(Exception e){e.printStackTrace(); }                        //查询数据库
               
       		int num = 0;
       		int row2 = 0;
       		Vector<String> v;
       		while(num<v_result.size()){
       			v =  new Vector<String>();
       			for(int i = 0;i<4;i++){
       				v.add(v_result.get(num));
       				num++;
       				}
       			orderedButton(row2);
       			row2++;
       			data.add(v);
       			}
           dtm.setDataVector(data, head);            		 //更新table
           jt.updateUI() ;                            		 //提示表格已更改
           jt.repaint();                              		 //重绘表格                   
}  



/*
 * 入口参数：i(int) 表示jTable的第i行
 * 
 * 函数功能：为jTable的每一条记录添加一个归还按钮
 *          当该按钮按下后，对应的设备归库，
 *          1、删除jTable里的对应记录的归还按钮，变灰，表示该设备已还
 *          2、更新数据库 Borrowed表
 * */
public void orderedButton(final int i ){
	final JButton jb_ordered_dispose = new JButton("归还");
	jb_ordered_dispose.setBounds(0,18+30*i,100,30);
	jb_ordered_dispose.setVisible(true);
	jp_button.add(jb_ordered_dispose);
	jp_button.repaint();
	jb_ordered_dispose.addActionListener(new ActionListener(){ 
		
        public void actionPerformed(ActionEvent event){		//“处理”按键  响应事件
         int k = 0;
        
         /*
         * 按下归还按键后 将数据库中borrowed的响应记录删除
         * 使用参量为：datadata.get(i).get(1)(归还设备的序列号)
         * */
        	sql ="delete from borrowed where eqp_Id = '"+ data.get(i).get(0).toString() + "'";
        	try {
        		c = new SocketClient(sql);                           //实例化Client对象
        		c.send();                                      //将sql语句发送给服务器端处理
        		k= Integer.parseInt(c.getResult());
        	} catch(Exception e){e.printStackTrace(); }                        //查询数据库
        	if (k!=0){JOptionPane.showMessageDialog(jp_button, "归还成功！","消息",JOptionPane.INFORMATION_MESSAGE);}//弹出信息提示对话框
        
        	jb_ordered_dispose.setEnabled(false);
        	}
        
		});
  }


    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JButton jb_show;
    private javax.swing.JPanel jp_equipment;
    private javax.swing.JPanel jp_information;
    private javax.swing.JTable jt;
    private javax.swing.JPanel jp_button;
    private javax.swing.JTextField jtf_userId;
    private javax.swing.JTextField jtf_username;
    // End of variables declaration
    
    
    public static void main(String args[]){
        JFrame jf = new JFrame();
    	EquipmentReturn seqp = new EquipmentReturn();
    	jf.add(seqp);
    	jf.setBounds(10,10,600,700);
    	jf.setVisible(true);

}
}
