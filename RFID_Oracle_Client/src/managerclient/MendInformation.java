package managerclient;

/*
 * 该模块完成管理员对用户报修设备的查询、及处理功能
 * 
 * 管理员进入该界面后，可以对报修的每一条信息 处理、维修成功后可将设备归为正常设备、失败后将设备报废
 * 
 * 涉及到的数据表为：storage，mend 等
 * 
 * storage表实时记录设备的报修及报废状态，及管理员查到的为storage表中eqp_mend_sign = '1' 的设备信息
 * 而mend 表中的信息是供用户查询自己报修设备的设备状态使用的，
 *       设备维修成功或报废后，mend表里对应的设备信息在用户查看至少一次后，按下superuserclient里equipmentrequiremended里的"我知道了"按键后删除
 *       
 * 即storage表的各种标志位供管理员查看和使用
 *   mend表里的mend_sign标志位供管理员在处理过程中修改更新
 *   mend里的信息供用户查看      
 * */


import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.xml.crypto.Data;

import socketclient.SocketClient;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * mendinformation.java
 *
 * Created on 2012-6-25, 10:02:37
 */


/**
 *
 * @author DELL
 */
@SuppressWarnings("serial")
public class MendInformation extends javax.swing.JPanel {
	
	 String sql;
	 
	 SocketClient c;
	 Vector<String> v_result;
	 
	 // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel mend_jp1;
    private javax.swing.JPanel mend_jp2;
    private javax.swing.JTable mend_jt;
    // End of variables declaration

   //自己添加的变量	 
    Vector <String> head ;
    Vector<Vector> data;
    DefaultTableModel dtm;
    
    /** Creates new form mendinformation */
    public MendInformation() {
    	initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

                jSplitPane1 = new javax.swing.JSplitPane();
                mend_jp1 = new javax.swing.JPanel();
                jScrollPane1 = new javax.swing.JScrollPane();
                mend_jt = new javax.swing.JTable();
                mend_jp2 = new javax.swing.JPanel();
                jSeparator1 = new javax.swing.JSeparator();
                jLabel1 = new javax.swing.JLabel();

                addAncestorListener(new javax.swing.event.AncestorListener() {
                    public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                    }
                    public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                        formAncestorAdded(evt);
                    }
                    public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                    }
                });

                jSplitPane1.setDividerLocation(400);

                head = new Vector<String>();                         //设置表格头
                {head.add("自行车序列号");
                head.add("自行车类型");
                head.add("报修人");
                head.add("报修时间");
                head.add("处理时间");
                head.add("处理状态");}
                data = new Vector<Vector>();                         //数据
                dtm = new DefaultTableModel(data,head);              //创建表格的模型
                mend_jt = new javax.swing.JTable(dtm);                    //创建JTable的实例

                mend_jt.setRowHeight(30);
                jScrollPane1.setViewportView(mend_jt);

                javax.swing.GroupLayout mend_jp1Layout = new javax.swing.GroupLayout(mend_jp1);
                mend_jp1.setLayout(mend_jp1Layout);
                mend_jp1Layout.setHorizontalGroup(
                    mend_jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                );
                mend_jp1Layout.setVerticalGroup(
                    mend_jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                );

                jSplitPane1.setLeftComponent(mend_jp1);

                javax.swing.GroupLayout mend_jp2Layout = new javax.swing.GroupLayout(mend_jp2);
                mend_jp2.setLayout(mend_jp2Layout);
                mend_jp2Layout.setHorizontalGroup(
                    mend_jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 166, Short.MAX_VALUE)
                );
                mend_jp2Layout.setVerticalGroup(
                    mend_jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGap(0, 470, Short.MAX_VALUE)
                );

                jSplitPane1.setRightComponent(mend_jp2);

                jLabel1.setBackground(new java.awt.Color(204, 204, 204));
                jLabel1.setFont(new java.awt.Font("幼圆", 1, 18)); // NOI18N
                jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jLabel1.setText("报修自行车信息表");
                jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(214, 214, 214)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)))
                        .addContainerGap())
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)
                        .addGap(15, 15, 15)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                        .addContainerGap())
                );
            }// </editor-fold>

    
ArrayList<String> AL_mend_flag = new ArrayList<String>();         			//状态标志数组，存放各个报修信息的处理状态：分为：0-待处理，1-处理状态，2-处理完成，3-报废
String str_time_ok ;        			 									//按下处理完成键的时间
String str_time_abandon ;    												//按下"报废"键的时间
ArrayList<String> AL_eqp_Id = new ArrayList<String>();               		//设备序列号数组，存放报修设备的序列号

/*
 * 初始页面，表格和按钮的初始化
 * */
private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {

	/*******************************************************************
	 * 在每次提交时，先清空jTable
	 * 清空jTable
	 * *****************************************************************/
        int sum = dtm.getRowCount();
        for (int i = 0; i < sum; i++)
            dtm.removeRow(0);
	
	/*
	 * 查询数据库
	 * 将已报修的设备显示出来
	 * */
    sql = "select eqp_id,eqp_type,user_name,mend_time,deal_time,mend_sign from view_mendinformation_show";  
    try {
		 c = new SocketClient(sql,6);                           //实例化Client对象
		 c.send();                                        //将sql语句发送给服务器端处理
		 v_result = new Vector<String>();
		 v_result = c.getV_result();	                  //得到查询数据库后的结果
		} catch(Exception e){e.printStackTrace(); }       //查询数据库
	
	int num = 0;
	int countRow = 0;									  //统计保修的设备数
	while(num<v_result.size()){
		Vector<String> v = new Vector<String>();
		for(int i = 0;i<6;i++){
			if(i == 0)     {v.add(v_result.get(num));      AL_eqp_Id.add(v_result.get(num));}                        //将每条预定记录的"设备类型"放到动态数组里
			else if(i < 5) {v.add(v_result.get(num));}
			else if(i == 5){String sign = v_result.get(num);      AL_mend_flag.add(sign);
			System.out.println("********" + AL_mend_flag);
							String str = null;
							if("0".equals(sign)){str = "待维修...";}
							if("1".equals(sign)){str = "维修状态";}
							if("2".equals(sign)){str = "维修成功";}
							if("3".equals(sign)){str = "报废状态";}
							v.add(str);
							}
			num++;
			}
			data.add(v);
        	initialButton(countRow);  	
        	countRow++;		 
        	}
        	dtm.setDataVector(data, head);             //更新table
            mend_jt.updateUI() ;                            //提示表格已更改
            mend_jt.repaint();                              //重绘表格
              
}  



/*
 * 为每条报修记录添加处理，处理成功，报废    三个按钮
 * 当按下处理按钮时做两件事情：1、更新数据表mend表       mend_sign = '1'
 *                           2、更新界面JTable
 * 当按下成功按钮时做三件事情：1、更新数据表mend表     mend_sign = '2'
 *                           2、更新storage表          eqp_mend_sign = '0'
 *                           3、更新界面JTable
 * 当按下报废按钮时做两件事情：1、更新数据表abandon表，插入报废信息
 *                           2、更新mend表的标志位 mend_sign = ‘3’
 *                           3、更新界面JTable
 * */
public void initialButton(final int count){
System.out.println("initalbutton中的count值为："+count);	
final JButton [] jbArray = {new JButton("处理"),new JButton("成功"),new JButton("报废")};
	jbArray[0].setBounds(10,20+30*count,60,28);         //添加处理按钮
	jbArray[1].setBounds(75,20+30*count,60,28);         //添加完成按钮
	jbArray[2].setBounds(140,20+30*count,60,28);        //添加报废按钮
	mend_jp2.add(jbArray[0]);
	mend_jp2.add(jbArray[1]);
	mend_jp2.add(jbArray[2]);
	if ("0".equals(AL_mend_flag.get(count))){
	jbArray[0].setEnabled(true);
	jbArray[1].setEnabled(false);
	jbArray[2].setEnabled(false);}
	else if ("1".equals(AL_mend_flag.get(count))){
		jbArray[0].setEnabled(false);
		jbArray[1].setEnabled(true);
		jbArray[2].setEnabled(true);}
	else {
		jbArray[0].setEnabled(false);
		jbArray[1].setEnabled(false);
		jbArray[2].setEnabled(false);
	}
	
//按钮 响应事件
	//********************************“处理”按键  响应事件*******************************
	 jbArray[0].addActionListener(new ActionListener(){    
	        public void actionPerformed(ActionEvent event){
	        jbArray[0].setEnabled(false);
	    	jbArray[1].setEnabled(true);
	    	jbArray[2].setEnabled(true);
	    	
            //获取点击处理按键的时间点
            Date now ;
            DateFormat d1 = DateFormat.getDateInstance();
            now = new Date(); 
            str_time_ok = d1.format(now);
            
            sql = "update mend set mend_sign = '1',deal_time = to_date('"+str_time_ok+"','yyyy-mm-dd') where mend.eqp_Id = '" + AL_eqp_Id.get(count)+"'";
            try {
       		 c = new SocketClient(sql);                           	//实例化Client对象
       		 c.send();                                        	//将sql语句发送给服务器端处理
       		} catch(Exception e){e.printStackTrace(); }       	//查询数据库
    	        
    	        data.get(count).set(4, str_time_ok);
    	        data.get(count).set(5, "维修状态");
    	        dtm.setDataVector(data, head);            		//更新table
                mend_jt.updateUI() ;                            //提示表格已更改
                mend_jt.repaint();                              //重绘表格
            }
	});
	 //*****************************“成功”按键  响应事件************************************
	 jbArray[1].addActionListener(new ActionListener(){   
	        public void actionPerformed(ActionEvent event){
	          jbArray[2].setEnabled(false);
	          jbArray[1].setEnabled(false);
	          
	      String sql_ok = "UPDATE storage SET eqp_mend_sign = '0' where storage.eqp_Id = '" + AL_eqp_Id.get(count)+"'";
          try {
        		 c = new SocketClient(sql_ok);                           //实例化Client对象
        		 c.send();                                        //将sql语句发送给服务器端处理
        		} catch(Exception e){e.printStackTrace(); }       //查询数据库
  	        
	        sql = "update mend set mend_sign = '2' where mend.eqp_Id = '" + AL_eqp_Id.get(count)+"'";
	        try {
	       		 c = new SocketClient(sql);                           //实例化Client对象
	       		 c.send();                                        //将sql语句发送给服务器端处理
	       		} catch(Exception e){e.printStackTrace(); }       //查询数据库
    	       
    	        data.get(count).set(5, "维修成功");
    	        dtm.setDataVector(data, head);                  //更新table
                mend_jt.updateUI() ;                            //提示表格已更改
                mend_jt.repaint();                              //重绘表格
                 }
	});
	 //********************************“报废”按键  响应事件*******************************
	 jbArray[2].addActionListener(new ActionListener(){       
	        public void actionPerformed(ActionEvent event){
	        	jbArray[1].setEnabled(false);
	        	jbArray[2].setEnabled(false);
	        	 Date now ;
	             DateFormat d1 = DateFormat.getDateInstance();
	             now = new Date(); //默认语言（汉语）下的默认风格（MEDIUM风格，比如：2008-6-16 20:54:53）
	             str_time_abandon = d1.format(now);
         	
          String sql_abandon = "insert into abandon values ('"+AL_eqp_Id.get(count) + "',to_date('"+str_time_abandon +"','yyyy-mm-dd'))";

          try {
        		 c = new SocketClient(sql_abandon);                           //实例化Client对象
        		 c.send();                                        //将sql语句发送给服务器端处理
        		} catch(Exception e){e.printStackTrace(); }       //查询数据库
	        
	        sql = "update mend set mend_sign = '3'where mend.eqp_Id = '" + AL_eqp_Id.get(count)+"'";
	        try {
       		 c = new SocketClient(sql);                           //实例化Client对象
       		 c.send();                                        //将sql语句发送给服务器端处理
       		} catch(Exception e){e.printStackTrace(); }       //查询数据库
    	        data.get(count).set(5, "报废状态");
    	        dtm.setDataVector(data, head);             //更新table
                mend_jt.updateUI() ;                            //提示表格已更改
                mend_jt.repaint();                              //重绘表格
	        }
	});
 
}

	

public static void main(String args[]) {
	JFrame jf = new JFrame();
	MendInformation mendinf = new MendInformation();
	jf.add(mendinf);
	jf.setBounds(10,10,600,600);
	jf.setVisible(true);

}
}

