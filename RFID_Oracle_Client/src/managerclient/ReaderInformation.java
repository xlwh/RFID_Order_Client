package managerclient;

import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import socketclient.SocketClient;

import commobject.LocationTypeArray;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReaderInformation.java
 *
 * Created on 2012-6-26, 10:59:55
 */

public class ReaderInformation extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = -1378299915563200335L;
	 String sql;
	 SocketClient c;
	 Vector<String> v_result;
	 // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jb_add_ok;
    private javax.swing.JButton jb_add_reset;
    private javax.swing.JButton jb_delete_ok;
    private javax.swing.JButton jb_delete_reset;
    private javax.swing.JButton jb_search;
    private javax.swing.JButton jb_update_ok;
    private javax.swing.JButton jb_update_resect;
    private javax.swing.JComboBox jcb_search;
    private javax.swing.JPanel jp_add;
    private javax.swing.JPanel jp_delete;
    private javax.swing.JPanel jp_search;
    private javax.swing.JPanel jp_update;
    private javax.swing.JTable jt_search;
    private javax.swing.JTextField jtf_add_Id;
    private javax.swing.JTextField jtf_add_location;
    private javax.swing.JTextField jtf_add_name;
    private javax.swing.JTextField jtf_add_time;
    private javax.swing.JTextField jtf_delete_Id;
    private javax.swing.JTextField jtf_update_Id;
    private javax.swing.JTextField jtf_update_location;
    // End of variables declaration
	
  //自己添加的变量	 
    Vector <String> head ;
    Vector<Vector> data;
    DefaultTableModel dtm;
    
	/** Creates new form ReaderInformation */
    public ReaderInformation() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jp_add = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtf_add_Id = new javax.swing.JTextField();
        jtf_add_name = new javax.swing.JTextField();
        jtf_add_location = new javax.swing.JTextField();
        jtf_add_time = new javax.swing.JTextField();
        jb_add_ok = new javax.swing.JButton();
        jb_add_reset = new javax.swing.JButton();
        jp_delete = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jb_delete_ok = new javax.swing.JButton();
        jb_delete_reset = new javax.swing.JButton();
        jtf_delete_Id = new javax.swing.JTextField();
        jp_search = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jcb_search = new javax.swing.JComboBox();
        jb_search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_search = new javax.swing.JTable();
        jp_update = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtf_update_Id = new javax.swing.JTextField();
        jtf_update_location = new javax.swing.JTextField();
        jb_update_ok = new javax.swing.JButton();
        jb_update_resect = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("幼圆", 1, 18));
        jLabel1.setText("读写器信息增删与查询");

        jLabel2.setText("读写器序列号:");

        jLabel3.setText("读写器名称：");

        jLabel4.setText("使用地点：");

        jLabel5.setText("购买时间：");

        jtf_add_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_add_IdActionPerformed(evt);
            }
        });

        jtf_add_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_add_nameActionPerformed(evt);
            }
        });

        jtf_add_location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_add_locationActionPerformed(evt);
            }
        });

        jtf_add_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_add_timeActionPerformed(evt);
            }
        });

        jb_add_ok.setText("确定");
        jb_add_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_add_okActionPerformed(evt);
            }
        });

        jb_add_reset.setText("重置");
        jb_add_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_add_resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_addLayout = new javax.swing.GroupLayout(jp_add);
        jp_add.setLayout(jp_addLayout);
        jp_addLayout.setHorizontalGroup(
            jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_addLayout.createSequentialGroup()
                .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp_addLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtf_add_name, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                            .addComponent(jtf_add_Id)
                            .addComponent(jtf_add_location)
                            .addComponent(jtf_add_time)))
                    .addGroup(jp_addLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jb_add_ok)
                        .addGap(96, 96, 96)
                        .addComponent(jb_add_reset)))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        jp_addLayout.setVerticalGroup(
            jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_addLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jtf_add_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtf_add_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtf_add_location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtf_add_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(jp_addLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_add_ok)
                    .addComponent(jb_add_reset))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("添加读写器", jp_add);

        jLabel8.setText("读写器序列号:");

        jb_delete_ok.setText("确定");
        jb_delete_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_delete_okActionPerformed(evt);
            }
        });

        jb_delete_reset.setText("重置");
        jb_delete_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_delete_resetActionPerformed(evt);
            }
        });

        jtf_delete_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_delete_IdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_deleteLayout = new javax.swing.GroupLayout(jp_delete);
        jp_delete.setLayout(jp_deleteLayout);
        jp_deleteLayout.setHorizontalGroup(
            jp_deleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_deleteLayout.createSequentialGroup()
                .addGroup(jp_deleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp_deleteLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtf_delete_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jp_deleteLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jb_delete_ok)
                        .addGap(93, 93, 93)
                        .addComponent(jb_delete_reset)))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        jp_deleteLayout.setVerticalGroup(
            jp_deleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_deleteLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jp_deleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtf_delete_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74)
                .addGroup(jp_deleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_delete_reset)
                    .addComponent(jb_delete_ok))
                .addContainerGap(215, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("删除读写器信息", jp_delete);

        jLabel10.setText("使用地点：");

        jcb_search.setModel(new javax.swing.DefaultComboBoxModel(LocationTypeArray.location));

        jb_search.setText("确定");
        jb_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_searchActionPerformed(evt);
            }
        });

      //表格的设置
        head = new Vector<String>();                         //设置表格头
        {head.add("读写器序列号");
        head.add("读写器名称");
        head.add("使用地点");
        head.add("购买时间");}
        data = new Vector<Vector>();                         //数据
        dtm = new DefaultTableModel(data,head);              //创建表格的模型
        jt_search = new javax.swing.JTable(dtm);                    //创建JTable的实例
        jScrollPane1.setViewportView(jt_search);

        javax.swing.GroupLayout jp_searchLayout = new javax.swing.GroupLayout(jp_search);
        jp_search.setLayout(jp_searchLayout);
        jp_searchLayout.setHorizontalGroup(
            jp_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_searchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jp_searchLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel10)
                .addGap(29, 29, 29)
                .addComponent(jcb_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addComponent(jb_search)
                .addGap(91, 91, 91))
            .addGroup(jp_searchLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jp_searchLayout.setVerticalGroup(
            jp_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_searchLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jp_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_search)
                    .addComponent(jLabel10)
                    .addComponent(jcb_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("查询读写器信息", jp_search);

        jLabel6.setText("读写器序列号：");

        jLabel7.setText("更新使用地点：");

        jtf_update_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_update_IdActionPerformed(evt);
            }
        });

        jtf_update_location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_update_locationActionPerformed(evt);
            }
        });

        jb_update_ok.setText("确定");
        jb_update_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_update_okActionPerformed(evt);
            }
        });

        jb_update_resect.setText("重置");
        jb_update_resect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_update_resectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_updateLayout = new javax.swing.GroupLayout(jp_update);
        jp_update.setLayout(jp_updateLayout);
        jp_updateLayout.setHorizontalGroup(
            jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_updateLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jp_updateLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jtf_update_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jp_updateLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_updateLayout.createSequentialGroup()
                                .addComponent(jb_update_ok)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                                .addComponent(jb_update_resect))
                            .addComponent(jtf_update_location))))
                .addContainerGap(179, Short.MAX_VALUE))
        );
        jp_updateLayout.setVerticalGroup(
            jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_updateLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtf_update_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtf_update_location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(103, 103, 103)
                .addGroup(jp_updateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_update_resect)
                    .addComponent(jb_update_ok))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("更新读写器信息", jp_update);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>

private void jtf_add_IdActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    jtf_add_name.requestFocus();
}

private void jtf_add_nameActionPerformed(java.awt.event.ActionEvent evt) {
    jtf_add_location.requestFocus();
}

private void jtf_add_locationActionPerformed(java.awt.event.ActionEvent evt) {
    jtf_add_time.requestFocus();
}

private void jtf_add_timeActionPerformed(java.awt.event.ActionEvent evt) {
    jb_add_ok.requestFocus();
}

private void jb_add_okActionPerformed(java.awt.event.ActionEvent evt) {
    //--------------------------添加读写器add页面 确定 按钮的事件响应---------------------------
  String add_Id = jtf_add_Id.getText();
  String add_name = jtf_add_name.getText();
  String add_location = jtf_add_location.getText();
  String add_time = jtf_add_time.getText();
  int k = 0;
  sql = "insert into reader(reader_Id,reader_name,reader_location,reader_boughttime) values ('" + add_Id+ "','" +add_name + "','" + add_location + "',to_date('" + add_time + "','yyyy-mm-dd'))";
  try {
	  c = new SocketClient(sql);                           //实例化Client对象
	  c.send();                                        //将sql语句发送给服务器端处理
	  k = Integer.parseInt(c.getResult());
	 } catch(Exception e){e.printStackTrace(); }  
   if(k == 1){
	JOptionPane.showMessageDialog(this, "添加读写器信息成功！！","提示",JOptionPane.INFORMATION_MESSAGE);
             }
    else if (k!=1){
	JOptionPane.showMessageDialog(this, "添加读写器信息失败！！","错误",JOptionPane.INFORMATION_MESSAGE);
             }
}

private void jb_add_resetActionPerformed(java.awt.event.ActionEvent evt) {
    jtf_add_Id.setText("");
    jtf_add_name.setText("");
    jtf_add_location.setText("");
    jtf_add_time.setText("");
}

private void jb_update_okActionPerformed(java.awt.event.ActionEvent evt) {
    //--------------------------------update页面的确定按钮响应事件---------------------------------
    String update_Id = jtf_update_Id.getText();
    String update_location = jtf_update_location.getText();
    sql = "UPDATE reader SET reader_location = '" + update_location + "' where reader_Id = '" + update_Id +"'";
    int i =0;
    try {
  	  c = new SocketClient(sql);                           //实例化Client对象
  	  c.send();                                        //将sql语句发送给服务器端处理
  	  i = Integer.parseInt(c.getResult());
		 } catch(Exception e){e.printStackTrace(); }  
     if(i == 1){
  	JOptionPane.showMessageDialog(this, "更新读写器信息成功！！","提示",JOptionPane.INFORMATION_MESSAGE);
               }
      else if (i!=1){
  	JOptionPane.showMessageDialog(this, "更新读写器信息失败！！","错误",JOptionPane.INFORMATION_MESSAGE);
               }
    
}

private void jtf_update_IdActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    jtf_update_location.requestFocus();
}

private void jtf_update_locationActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    jb_update_ok.requestFocus();
}

private void jb_update_resectActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    jtf_update_Id.setText("");
    jtf_update_location.setText("");
}

private void jtf_delete_IdActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    jb_delete_ok.requestFocus();
}

private void jb_delete_okActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    //-----------------------------删除界面的  确定 按钮响应事件--------------------
	String delete_Id = jtf_delete_Id.getText();
	sql = "delete from reader where reader_Id = '" + delete_Id + "'";
	int i = 0;
	try {
  	  c = new SocketClient(sql);                           //实例化Client对象
  	  c.send();                                        //将sql语句发送给服务器端处理
  	  i = Integer.parseInt(c.getResult());
		 } catch(Exception e){e.printStackTrace(); }  
     if(i == 1){
  	JOptionPane.showMessageDialog(this, "删除成功！！","提示",JOptionPane.INFORMATION_MESSAGE);
               }
      else if (i!=1){
  	JOptionPane.showMessageDialog(this, "删除失败！！","错误",JOptionPane.INFORMATION_MESSAGE);
               }
}

private void jb_delete_resetActionPerformed(java.awt.event.ActionEvent evt) {
// TODO add your handling code here:
    jtf_delete_Id.setText("");
}

private void jb_searchActionPerformed(java.awt.event.ActionEvent evt) {
	/*******************************************************************
	 * 在每次提交时，先清空jTable
	 * 清空jTable
	 * *****************************************************************/
        int sum = dtm.getRowCount();
        for (int i = 0; i < sum; i++)
            dtm.removeRow(0);

// TODO add your handling code here:
    //------------------------查询界面的 确定 按钮响应事件------------------------------
    int k = jcb_search.getSelectedIndex();
    if (k == 0){sql = "select * from reader";}
    else {sql = "select * from reader where reader_location = '" + jcb_search.getSelectedItem()+"'";}
    try {
  	  c = new SocketClient(sql,4);                           //实例化Client对象
	  c.send();                                        //将sql语句发送给服务器端处理
	  v_result = new Vector<String>();
	  v_result = c.getV_result();
	 } catch(Exception e){e.printStackTrace(); }                         //查询数据库
	
	 Vector<String> v = null;
	    int num =0;
	    while(num<v_result.size()){
	    	v = new Vector<String>();
		  for(int j = 0;j < 4;j++){
			v.add(v_result.get(num));
			num++;
		  }	
		  data.add(v);
		  }
        	if(data.size() == 0){
        		JOptionPane.showMessageDialog(this, "没有您要查询的设备信息！！","消息",JOptionPane.INFORMATION_MESSAGE);//弹出信息提示对话框
        	return;
        	}
       

        dtm.setDataVector(data, head);             //更新table
        jt_search.updateUI() ;                            //提示表格已更改
        jt_search.repaint();                              //重绘表格
}


public static void main (String args[]) {
	JFrame jf = new JFrame();  
	ReaderInformation reader_inf = new ReaderInformation();
	//SearchEquipment seqp = new SearchEquipment("127.0.0.1:3306");
	jf.add(reader_inf);
	jf.setBounds(10,10,600,600);
	jf.setVisible(true);
	
} 
}
