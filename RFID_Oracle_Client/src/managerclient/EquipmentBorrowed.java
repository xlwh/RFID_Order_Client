/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EquipmentBorrowed.java
 *
 * Created on 2012-6-30, 8:58:26
 */
package managerclient;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import socketclient.SocketClient;


/**
 *
 * @author DELL
 */
public class EquipmentBorrowed extends javax.swing.JPanel {
	
	SocketClient c;
	Vector<String> v_result ;
	String sql;

    /** Creates new form EquipmentBorrowed */
    public EquipmentBorrowed() {
        initComponents(); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

//    	/*******************************************************************
//    	 * 在每次提交时，先清空jTable
//    	 * 清空jTable
//    	 * *****************************************************************/
//            int sum = dtm_borrowed.getRowCount();
//            for (int j = 0; j < sum; j++)
//            	dtm_borrowed.removeRow(0);
//            int sum_ordered = dtm_ordered.getRowCount();
//            for (int j = 0; j < sum_ordered; j++)
//            	dtm_ordered.removeRow(0);
    	
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtf_userId = new javax.swing.JTextField();
        jb_ok = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_borrowed = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_ordered = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jb_borrowed = new javax.swing.JButton();
        jb_updatetable = new javax.swing.JButton();

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setFont(new java.awt.Font("幼圆", 1, 18));
        jLabel1.setText("用户信息认证");

        jLabel2.setText("用户号：");

        jb_ok.setText("确定");
        jb_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_okActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("幼圆", 1, 18));
        jLabel3.setText("用户自行车信息");

        jSplitPane1.setDividerLocation(180);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        head_borrowed = new Vector<String>();                         //设置表格头
        {
        	head_borrowed.add("自行车序列号");
        	head_borrowed.add("自行车类型");
            head_borrowed.add("使用地点");
            head_borrowed.add("借出时间");}
        data_borrowed= new Vector<Vector>();                         //数据
        dtm_borrowed = new DefaultTableModel(data_borrowed,head_borrowed);              //创建表格的模型
        jt_borrowed= new javax.swing.JTable(dtm_borrowed);                    //创建JTable的实例
        jt_borrowed.setRowHeight(30);
        jScrollPane2.setViewportView(jt_borrowed);

        jTabbedPane2.addTab("已借自行车", jScrollPane2);

        jSplitPane1.setRightComponent(jTabbedPane2);

        //表格的设置
        head_ordered = new Vector<String>();                         //设置表格头
        {head_ordered.add("自行车类型");
        head_ordered.add("预定数量");
        head_ordered.add("使用地点");}
        data_ordered= new Vector<Vector>();                         //数据
        dtm_ordered = new DefaultTableModel(data_ordered,head_ordered);              //创建表格的模型
        jt_ordered = new javax.swing.JTable(dtm_ordered);                    //创建JTable的实例
        jt_ordered.setRowHeight(30);
        jScrollPane1.setViewportView(jt_ordered);

        jLabel4.setText("已预订自行车(最大为4)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jb_borrowed.setText("借用自行车");
        jb_borrowed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_borrowedActionPerformed(evt);
            }
        });
        
        jb_updatetable.setText("借出");
        jb_updatetable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jb_updatetableActionPerformed(evt);
            }
        });
        jb_updatetable.setBounds(600,55,90,29); 
        this.add(jb_updatetable);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(241, 241, 241))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jLabel2)
                .addGap(36, 36, 36)
                .addComponent(jtf_userId, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113)
                .addComponent(jb_ok, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jb_borrowed)
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(jLabel3)
                .addContainerGap(253, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtf_userId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jb_ok)
                    .addComponent(jb_borrowed))
                .addGap(38, 38, 38)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );
        jb_ok.setEnabled(true);
        jb_borrowed.setEnabled(false);
        jb_updatetable.setEnabled(false);
          
    }// </editor-fold>

 int count_user=1;                            //用户计数器，便于模拟读卡器读取用户信息的过程，保证每次读的都不一样
 int count_user_next = 0;
 int count_ordered =0;                        //记录用户预定设备的记录数，便于为每条记录添加处理按钮
 Vector<String> v_eqp_type;         			  //存放每条记录的预定设备的类型  
 Vector<Integer> v_ordered_num;        		  //预定设备的数量
 Vector<String> v_location;
 Vector<Integer> v_ordered_NO;        		  //预定设备的记录编号
 String userid = null;                        //当前处理的用户id号
 String borrowedtime;                         //设备借出时间
 
//确定按钮处理事件    从数据库中读取用户的序列号，然后在显示用户的预定和已借用设备的信息
private void jb_okActionPerformed(java.awt.event.ActionEvent evt) {   
	
	/*******************************************************************
	 * 在每次提交时，先清空jTable
	 * 清空jTable
	 * *****************************************************************/
        int sum = dtm_borrowed.getRowCount();
        for (int j = 0; j < sum; j++)
        	dtm_borrowed.removeRow(0);
        int sum_ordered = dtm_ordered.getRowCount();
        for (int j = 0; j < sum_ordered; j++)
        	dtm_ordered.removeRow(0);
	
	v_eqp_type = new Vector<String>();
	v_ordered_num = new Vector<Integer>();
	v_location = new Vector<String>();
	v_ordered_NO = new Vector<Integer>();
	
	count_user_next = count_user +1;
	jb_borrowed.setEnabled(true);   
    /*******************************************************************************************
     * 第一步
     * 模拟读卡器读取用户信息的过程
     * 从数据库总读取用户Id
     * 每次从用户设备表单中读取一个用户
  ********************************************************************************************/   
    sql = "select rownum rn, user_Id from superusers where rownum <"+count_user_next +
    		" minus select rownum rn, user_Id from superusers where rownum <" +count_user;
    		  //每次从用户设备表单中读取一个用户
    try {
		 c = new SocketClient(sql,2);                           //实例化Client对象
		 c.send();                                        //将sql语句发送给服务器端处理
		 v_result = new Vector<String>();
		 v_result = c.getV_result();	                  //得到查询数据库后的结果
		} catch(Exception e){e.printStackTrace(); }                        //查询数据库
       
		count_user++;                                     //用户计数器加1，下一次读取用户表单的下一条信息
		userid = v_result.get(1);                         //得到“读卡器”读取的用户地址
		jtf_userId.setText(userid);                       //将用户ID放入文本框中
		
      
            
      /*******************************************************************************************
      * 第二步:已借设备显示
      * 根据userid 查询用户已借设备信息
      * 将用户已借信息显示在相应的jtable里
      ********************************************************************************************/ 
      sql = "select eqp_Id,eqp_type,eqp_location,borrowed_time from view_EquipmentBorrowed_show where user_Id= '" + userid+"'";
      try {
 		 c = new SocketClient(sql,4);                           //实例化Client对象
 		 c.send();                                        //将sql语句发送给服务器端处理
 		 v_result = new Vector<String>();
 		 v_result = c.getV_result();	                  //得到查询数据库后的结果
 		} catch(Exception e){e.printStackTrace(); }       //查询数据库
 		
 		/*
		 * 将查询结果放在二维数组data里
		 * */
 		int num = 0;
		while(num<v_result.size()){
			Vector<String> v = new Vector<String>();
			for(int i = 0;i<4;i++){
				v.add(v_result.get(num));
				num++;
			}
			data_borrowed.add(v);
		}
         dtm_borrowed.setDataVector(data_borrowed, head_borrowed);             //更新table
         jt_borrowed.updateUI() ;                            //提示表格已更改
         jt_borrowed.repaint();                              //重绘表格
              
            
     /*******************************************************************************************
     * 第三步：预定设备显示
     * 根据userid 查询用户已预定设备的信息
     * 将用户预定设备信息显示在相应的jtable里
     * 为没条预定信息添加相应的处理按键
    ******************************************************************************************/ 
        sql = "select eqp_type,num ,eqp_location ,ordered_NO from ordered_num where super_user_Id =  '" + userid +"'";
        try {
    		 c = new SocketClient(sql,4);                           //实例化Client对象
    		 c.send();                                        //将sql语句发送给服务器端处理
    		 v_result = new Vector<String>();
    		 v_result = c.getV_result();	                  //得到查询数据库后的结果
    		} catch(Exception e){e.printStackTrace(); }       //查询数据库
       
    	/*
		 * 将查询结果放在二维数组data里
		 * */
    	int count_ordered = 0;	
 		int num2 = 0;
		while(num2<v_result.size()){
			Vector<String> v = new Vector<String>();
			for(int i = 0;i<4;i++){
				if(i == 0)     {v.add(v_result.get(num2));      v_eqp_type.add(v_result.get(num2));}                        //将每条预定记录的"设备类型"放到动态数组里
				else if (i ==1){v.add(v_result.get(num2));      v_ordered_num.add(Integer.parseInt(v_result.get(num2)));}	//将每条预定记录的"预定数量"放到动态数组里
				else if (i ==2){v.add(v_result.get(num2));      v_location.add(v_result.get(num2));}						//将每条预定记录的"使用地点"放到动态数组里
				else if (i ==3){v.add(v_result.get(num2));      v_ordered_NO.add(Integer.parseInt(v_result.get(num2)));}	//将每条预定记录的"预定号"放到动态数组里
				num2++;
			}
			data_ordered.add(v);
			orderedButton(count_ordered);
			count_ordered++;
		}
		 dtm_ordered.setDataVector(data_ordered, head_ordered);             //更新table
         jt_ordered.updateUI() ;                            //提示表格已更改
         jt_ordered.repaint();                              //重绘表格
              
} 

 /************************************************************************
 * 为每条预定信息生成相应的处理按键
 * 该处理按键  模拟 设备借出时 的处理过程-------当按下处理按键后表示设备已借出
 * 当按键按下后，数据库要更新
 * **********************************************************************/
Vector<String> v_eqp_Id_found;
    public void orderedButton(final int i ){
    	
    	/*
    	 * 设备搜索按键添加及处理方法
    	 * */
    	
    	final JButton jb_ordered_dispose_search = new JButton("搜索");
    	jb_ordered_dispose_search.setBounds(450,55+30*i,100,30);
    	jPanel1.add(jb_ordered_dispose_search);
    	
    	final JButton jb_ordered_dispose_borrowed= new JButton("借出");
    	jb_ordered_dispose_borrowed.setBounds(555,55+30*i,100,30);
    	jb_ordered_dispose_borrowed.setEnabled(false);
    	jPanel1.add(jb_ordered_dispose_borrowed);
    	
    	
    	
    	
    	
    	/*
    	 * 搜索按钮处理事件
    	 * */
    	jb_ordered_dispose_search.addActionListener(new ActionListener(){          //“借出”按键  响应事件
	        public void actionPerformed(ActionEvent event){
	        	
	        	//得到设备的借出时间 
	        	 Date now ;
	             DateFormat d1 = DateFormat.getDateInstance();
	             now = new Date(); //默认语言（汉语）下的默认风格（MEDIUM风格，比如：2008-6-16 20:54:53）
	             borrowedtime = d1.format(now);


               /*-----------------------------------------------------------------
                * 将数据库中ordered_num中的对应记录删除
                * 
                ------------------------------------------------------------------*/ 
                sql = "delete from ordered_num where ordered_NO =" +v_ordered_NO.get(i);
                try {
            		 c = new SocketClient(sql);                           //实例化Client对象
            		 c.send();                                        //将sql语句发送给服务器端处理
            		} catch(Exception e){e.printStackTrace(); }       //查询数据库

            		
	        	/*--------------------------------------------------------------
	        	*该处模拟   读写器 读取借出设备信息的过程
	        	*         找到对应数量的设备
	        	*
	        	*从数据库中任取出相应数量的设备
	        	*所用参数为：v_eqp_type（预定设备类型）  
	        	*           v_ordered_num（预定设备的数量）
	        	*           v_location  
	        	----------------------------------------------------------------*/
	        	int row = v_ordered_num.get(i)+1;
	        	sql = "select rownum rn,eqp_Id from View_EquipmentBorrowed_ReadEqp where eqp_type = '"+v_eqp_type.get(i)+"' AND rownum <" + row;
	        	
	        	v_eqp_Id_found = new Vector<String>();//创建临时数组存放每条信息
	        	try {
	       		 c = new SocketClient(sql,2);                           //实例化Client对象
	       		 c.send();                                        //将sql语句发送给服务器端处理
	       		v_result = new Vector<String>();
	       		v_result = c.getV_result();                       //得到查询数据库后的结果
	       		} catch(Exception e){e.printStackTrace(); }       //查询数据库
	       		
	       		for (int i = 0;i < v_result.size();i++){
	       			if(i%2 != 0){v_eqp_Id_found.add(v_result.get(i));}
	       		}
System.out.println("根据预定数量找到的设备为：" +v_eqp_Id_found);
               if(v_eqp_Id_found.size()<v_ordered_num.get(i)){
            	   JOptionPane.showMessageDialog(jt_ordered, "库存不足！！","消息",JOptionPane.INFORMATION_MESSAGE);//弹出信息提示对话框
               }
               
               else{
            	   //搜索结果显示
            	   NewSearch search = new NewSearch(v_eqp_Id_found);
            	   search.setVisible(true);
            	   jb_ordered_dispose_borrowed.setEnabled(true);
            	   
               }
	        }
    	});
	        
        
    	
    	
    	
    	/*
    	 * "借出"按键添加及处理方法
    	 * */
    	

    	jb_ordered_dispose_borrowed.addActionListener(new ActionListener(){          //“借出”按键  响应事件
	        public void actionPerformed(ActionEvent event){
	        	
	        	//得到设备的借出时间 
	        	 Date now ;
	             DateFormat d1 = DateFormat.getDateInstance();
	             now = new Date(); //默认语言（汉语）下的默认风格（MEDIUM风格，比如：2008-6-16 20:54:53）
	             borrowedtime = d1.format(now);


//               /*-----------------------------------------------------------------
//                * 将数据库中ordered_num中的对应记录删除
//                * 
//                ------------------------------------------------------------------*/ 
//                sql = "delete from ordered_num where ordered_NO =" +v_ordered_NO.get(i);
//                try {
//            		 c = new SocketClient(sql);                           //实例化Client对象
//            		 c.send();                                        //将sql语句发送给服务器端处理
//            		} catch(Exception e){e.printStackTrace(); }       //查询数据库

	             /*--------------------------------------------------------------
	                * 当 处理 按键按下后 设备借出
	                * 此时需将相应的设备添加到borrowed的表中，做得实时更新数据库
	                * 所用参数为：v_eqp_Id_found(设备序列号数组)
	                *            userid(用户号)
	                *            username(用户名)
	                *            borrowedtime(借出时间)
	                *            v_eqp_type(设备类型)
	                *            v_location(使用地点)
	               ----------------------------------------------------------------*/
	                int count_insert = 0;
	            	for(int j = 0;j<v_eqp_Id_found.size();j++){
		             sql = "insert into borrowed(eqp_Id,super_user_Id,borrowed_time,eqp_location)" +
		             		"values('" + v_eqp_Id_found.get(j) + "','" 
		             		+userid+"',to_date('"+borrowedtime+"','yyyy-mm-dd'),'"+v_location.get(i)+"')";
System.out.println("*****************"+sql);
		             try {
	            		 c = new SocketClient(sql);                           //实例化Client对象
	            		 c.send();                                        //将sql语句发送给服务器端处理
	            		 int i = Integer.parseInt(c.getResult());
	            		 count_insert += i;
	            		} catch(Exception e){e.printStackTrace(); }       
	                }
	            	if(count_insert != v_ordered_num.get(i)){
	            		JOptionPane.showMessageDialog(jt_ordered, "处理失败！！","消息",JOptionPane.INFORMATION_MESSAGE);//弹出信息提示对话框
	            	}
	               
	               
			        /*
			         * 更新jt_ordered-------将jt_ordered中的处理按钮 变灰
			         */	
	            	jb_ordered_dispose_search.setEnabled(false);               //将处理按键 变灰以表示处理完毕
	            	jb_ordered_dispose_borrowed.setEnabled(false);
		            
		            
		           /*--------------------------------------------------------------------------
		            * 更新jt_borrowed-------将每条处理后的记录添加到jt_borrowed中
			        * jt_borrowed的记录放在数组data_borrowed中
			        * data_borrowed数组均为全局变量
			        * 所用参数为：v_eqp_Id_found（设备序列号）
			        *             v_eqp_type（设备类型）
			        *             v_location[i]（使用地点）
			        *            borrowedtime（借出时间） 
		            * ------------------------------------------------------------------------*/
		          for(int j = 0;j<v_eqp_Id_found.size();j++){
		        	  Vector<String> v = new Vector<String>();           //创建临时数组存放每条信息
		        	  v.add(v_eqp_Id_found.get(j));
		        	  v.add(v_eqp_type.get(i));
		        	  v.add( v_location.get(i));
		        	  v.add(borrowedtime);
		        	  data_borrowed.add(v);
		          }
		          dtm_borrowed.setDataVector(data_borrowed, head_borrowed);
		          jt_borrowed.updateUI() ;                            //提示表格已更改
		          jt_borrowed.repaint();                              //重绘表格
	               }
	      
    	});

               
    	/*
    	 * V1版本：
    	 * 借出按键增加及处理方法
    	 * 设备搜索和借出功能一体化
    	 * */
//    	final JButton jb_ordered_dispose = new JButton("借出");
//    	jb_ordered_dispose.setBounds(450,55+30*i,100,30);
//    	jPanel1.add(jb_ordered_dispose);
//    	jb_ordered_dispose.addActionListener(new ActionListener(){          //“借出”按键  响应事件
//	        public void actionPerformed(ActionEvent event){
//	        	
//	        	//得到设备的借出时间 
//	        	 Date now ;
//	             DateFormat d1 = DateFormat.getDateInstance();
//	             now = new Date(); //默认语言（汉语）下的默认风格（MEDIUM风格，比如：2008-6-16 20:54:53）
//	             borrowedtime = d1.format(now);
//System.out.println("设备何时借出？？：" +borrowedtime);	 //得到设备的借出时间 
//
//               /*-----------------------------------------------------------------
//                * 将数据库中ordered_num中的对应记录删除
//                * 
//                ------------------------------------------------------------------*/ 
//                sql = "delete from ordered_num where ordered_NO =" +v_ordered_NO.get(i);
//                try {
//            		 c = new SocketClient(sql);                           //实例化Client对象
//            		 c.send();                                        //将sql语句发送给服务器端处理
//            		} catch(Exception e){e.printStackTrace(); }       //查询数据库
//
//	        	/*--------------------------------------------------------------
//	        	*该处模拟   读写器 读取借出设备信息的过程
//	        	*         找到对应数量的设备
//	        	*
//	        	*从数据库中任取出相应数量的设备
//	        	*所用参数为：v_eqp_type（预定设备类型）  
//	        	*           v_ordered_num（预定设备的数量）
//	        	*           v_location  
//	        	----------------------------------------------------------------*/
//	        	int row = v_ordered_num.get(i)+1;
//	        	sql = "select rownum rn,eqp_Id from View_EquipmentBorrowed_ReadEqp where eqp_type = '"+v_eqp_type.get(i)+"' AND rownum <" + row;
//	        	
//	        	Vector<String> v_eqp_Id_found = new Vector<String>();//创建临时数组存放每条信息
//	        	try {
//	       		 c = new SocketClient(sql,2);                           //实例化Client对象
//	       		 c.send();                                        //将sql语句发送给服务器端处理
//	       		v_result = new Vector<String>();
//	       		v_result = c.getV_result();                       //得到查询数据库后的结果
//	       		} catch(Exception e){e.printStackTrace(); }       //查询数据库
//	       		
//	       		for (int i = 0;i < v_result.size();i++){
//	       			if(i%2 != 0){v_eqp_Id_found.add(v_result.get(i));}
//	       		}
//System.out.println("根据预定数量找到的设备为：" +v_eqp_Id_found);
//               if(v_eqp_Id_found.size()<v_ordered_num.get(i)){
//            	   JOptionPane.showMessageDialog(jt_ordered, "库存不足！！","消息",JOptionPane.INFORMATION_MESSAGE);//弹出信息提示对话框
//               }
//               
//               else{
//
//               /*--------------------------------------------------------------
//                * 当 处理 按键按下后 设备借出
//                * 此时需将相应的设备添加到borrowed的表中，做得实时更新数据库
//                * 所用参数为：v_eqp_Id_found(设备序列号数组)
//                *            userid(用户号)
//                *            username(用户名)
//                *            borrowedtime(借出时间)
//                *            v_eqp_type(设备类型)
//                *            v_location(使用地点)
//               ----------------------------------------------------------------*/
//                int count_insert = 0;
//            	for(int j = 0;j<v_eqp_Id_found.size();j++){
//	             sql = "insert into borrowed(eqp_Id,super_user_Id,borrowed_time,eqp_location)" +
//	             		"values('" + v_eqp_Id_found.get(j) + "','" 
//	             		+userid+"',to_date('"+borrowedtime+"','yyyy-mm-dd'),'"+v_location.get(i)+"')";
//	             try {
//            		 c = new SocketClient(sql);                           //实例化Client对象
//            		 c.send();                                        //将sql语句发送给服务器端处理
//            		 int i = Integer.parseInt(c.getResult());
//            		 count_insert += i;
//            		} catch(Exception e){e.printStackTrace(); }       
//                }
//            	if(count_insert != v_ordered_num.get(i)){
//            		JOptionPane.showMessageDialog(jt_ordered, "处理失败！！","消息",JOptionPane.INFORMATION_MESSAGE);//弹出信息提示对话框
//            	}
//               
//               
//		        /*
//		         * 更新jt_ordered-------将jt_ordered中的处理按钮 变灰
//		         */	
//	            jb_ordered_dispose.setEnabled(false);               //将处理按键 变灰以表示处理完毕
//	            
//	            
//	           /*--------------------------------------------------------------------------
//	            * 更新jt_borrowed-------将每条处理后的记录添加到jt_borrowed中
//		        * jt_borrowed的记录放在数组data_borrowed中
//		        * data_borrowed数组均为全局变量
//		        * 所用参数为：v_eqp_Id_found（设备序列号）
//		        *             v_eqp_type（设备类型）
//		        *             v_location[i]（使用地点）
//		        *            borrowedtime（借出时间） 
//	            * ------------------------------------------------------------------------*/
//	          for(int j = 0;j<v_eqp_Id_found.size();j++){
//	        	  Vector<String> v = new Vector<String>();           //创建临时数组存放每条信息
//	        	  v.add(v_eqp_Id_found.get(j));
//	        	  v.add(v_eqp_type.get(i));
//	        	  v.add( v_location.get(i));
//	        	  v.add(borrowedtime);
//	        	  data_borrowed.add(v);
//	          }
//	          dtm_borrowed.setDataVector(data_borrowed, head_borrowed);
//	          jt_borrowed.updateUI() ;                            //提示表格已更改
//	          jt_borrowed.repaint();                              //重绘表格
//               }
//	        }
//	});
    	
    }
    
NewBorrowed nborrowed;
// 借用设备 按钮处理事件
private void jb_borrowedActionPerformed(java.awt.event.ActionEvent evt) {                                            
    	jb_updatetable.setEnabled(true);
	    nborrowed = new NewBorrowed(userid);
	    nborrowed.setBounds(10,10,700,600);
	    nborrowed.setVisible(true);
	    System.out.println(nborrowed.int_num);
}                                           

//更新按钮处理事件  
private void jb_updatetableActionPerformed(java.awt.event.ActionEvent evt) {                                            
	 /*--------------------------------------------------------------
     * 当更新按钮下后 设备借出
     * 此时需将相应的设备添加到borrowed的表中，做得实时更新数据库
     * 所用参数为：nborrowed.v_eqp_Id(设备序列号数组)
     *            userid(用户号)
     *            nborrowed.borrowed_time_newborrowed(借出时间)
     *            nborrowed.str_eqp_type(设备类型)
     *            nborrowed.str_location(使用地点)
    ----------------------------------------------------------------*/
    for(int j = 0;j<nborrowed.v_eqp_Id.size();j++){
      sql = "insert into borrowed(eqp_Id,super_user_Id,eqp_location,borrowed_time) " +
      		"values('" + nborrowed.v_eqp_Id.get(j)+ "','" 
      		+userid+"','"+nborrowed.str_location+"',to_date('"+nborrowed.borrowed_time_newborrowed+"','yyyy-mm-dd'))";
      try {
    		 c = new SocketClient(sql);                           //实例化Client对象
    		 c.send();                                        //将sql语句发送给服务器端处理
    		} catch(Exception e){e.printStackTrace(); }       //查询数据库
     }
    
    /*--------------------------------------------------------------------------
     * 更新jt_borrowed-------将每条处理后的记录添加到jt_borrowed中
     * jt_borrowed的记录放在数组data_borrowed中
     * data_borrowed数组均为全局变量
     * 所用参数为： nborrowed.v_eqp_Id(设备序列号数组)
     *             nborrowed.str_eqp_type(设备类型)）
     *             nborrowed.str_location(使用地点)
     *             nborrowed.borrowed_time_newborrowed(借出时间) 
     * ------------------------------------------------------------------------*/
   Vector<String> v ;
    for(int j = 0;j<nborrowed.v_eqp_Id.size();j++){
      v = new Vector<String>();
      v.add(nborrowed.v_eqp_Id.get(j));
      v.add(nborrowed.str_eqp_type);
      v.add(nborrowed.str_location);
      v.add(nborrowed.borrowed_time_newborrowed);
      data_borrowed.add(v);
    }
    dtm_borrowed.setDataVector(data_borrowed, head_borrowed);
    jt_borrowed.updateUI() ;                            //提示表格已更改
    jt_borrowed.repaint();                              //重绘表格
  
    
    
}
   
    
    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton jb_borrowed;
    private javax.swing.JButton jb_updatetable;
    private javax.swing.JButton jb_ok;
    private javax.swing.JTable jt_borrowed;
    private javax.swing.JTable jt_ordered;
    private javax.swing.JTextField jtf_userId;
    // End of variables declaration

    Vector <String> head_ordered ;
    Vector<Vector> data_ordered;
    DefaultTableModel dtm_ordered;
    
    Vector <String> head_borrowed ;
    Vector<Vector> data_borrowed;
    DefaultTableModel dtm_borrowed;
    
   
   
public static void main(String args[]){
        JFrame jf = new JFrame();
    	EquipmentBorrowed seqp = new EquipmentBorrowed();
    	jf.add(seqp);
    	jf.setBounds(10,10,700,600);
    	jf.setVisible(true);

}
}
